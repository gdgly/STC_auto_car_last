C51 COMPILER V9.01   PID                                                                   07/15/2020 14:47:17 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN .\Out_File\PID.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\CODE\PID.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Libraries\libr
                    -aries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\USER\inc;..\USER\src;..\CODE) DEBUG OBJE
                    -CTEXTEND PRINT(.\Out_File\PID.lst) TABS(2) OBJECT(.\Out_File\PID.obj)

line level    source

   1          /*
   2           * @Description  : 
   3           * @Version      : 
   4           * @Date         : 2020-06-21 20:33:02
   5           * @LastEditTime : 2020-07-14 15:31:17
   6           */ 
   7          #include "PID.h"
   8          
   9          PID MOTOR_PID, Angle_PID, Ang_Vel_PID, Direct_PID, Turn_PID, Distance_PID;//ÂÆö‰πâËàµÊú∫ÂíåÁîµÊú∫ÁöÑPIDÂèÇ
             -Êï∞ÁªìÊûÑ‰Ωì
  10          float MOTOR[4]   = {10, 0, 0, 1000};    // ÈÄüÂ∫¶ÁéØPID ÊúÄÂêé‰∏ÄÈ°π‰∏∫ÁßØÂàÜÈôêÂπÖ
  11          float Angle[4]   = {0.15, 0, 0.06, 500};    // ËßíÂ∫¶ÁéØPID
  12          float Ang_Vel[4] = {0.20, 0.018, 0.001, 1000};    // ËßíÈÄüÂ∫¶ÁéØPID
  13          float Direct[4]  = {0.017, 0.001, 0.023, 70}; // ËΩ¨ÂêëÁéØPID ‰ΩçÁΩÆ  0.017 0.02
  14          /********* ËΩ¨ÂêëÂ§ñÁéØÂä®ÊÄÅPID ********/     //Áî±‰∫éÊòØ‰∏≤Á∫ßPID,ÊâÄ‰ª•Áß∞Â§ñÁéØÊ≠§Â§ÑÁöÑ P   1/P‰∏∫Âä®
             -ÊÄÅPÁöÑÁ≥ªÊï∞    
  15          float Turn[5][4] = {{100, 2, 1, 100},   //Ëµ∑Ê≠•ËΩ¨ÂêëÂèÇÊï∞PID              I    ‰∏∫Âä®ÊÄÅPÁöÑÊúÄÂ∞èÈôêÂπ
             -Ö(ÂßãÁªà‰∏ç‰ºöÂà∞ËææÁöÑÊúÄÂ∞èÂÄº)
  16                      {100, 3, 2, 100},   //‰ΩéÈÄüËΩ¨ÂêëÂèÇÊï∞PID 
  17                      {100, 4, 3, 100},   //‰∏≠ÈÄüËΩ¨ÂêëÂèÇÊï∞PID 
  18                      {100, 5, 4, 100},   //È´òÈÄüËΩ¨ÂêëÂèÇÊï∞PID 
  19                      {200, 10, 8, 100}}; //ÁéØÂ≤õËΩ¨ÂêëÂèÇÊï∞PID
  20          float TURN_lim=165;//ËΩ¨ÂêëÂ§ñÁéØËæìÂá∫ÈôêÂà∂
  21          // PIDÂèÇÊï∞ÂàùÂßãÂåñ
  22          void PID_Parameter_Init(PID *sptr)
  23          {
  24   1        sptr->SumError  = 0;
  25   1        sptr->LastError = 0;  //Error[-1]
  26   1        sptr->PrevError = 0;  //Error[-2] 
  27   1        sptr->LastData  = 0;
  28   1      }
  29          // ‰ΩçÁΩÆÂºèÂä®ÊÄÅPIDÊéßÂà∂‰∏∫ËΩ¨ÂêëÊõ≤ÁéáËÆæËÆ°  
  30          int32 PlacePID_Control(PID *sprt, float *PID, int32 NowPiont, int32 SetPoint)
  31          {
  32   1        //ÂÆö‰πâ‰∏∫ÂØÑÂ≠òÂô®ÂèòÈáèÔºåÂè™ËÉΩÁî®‰∫éÊï¥ÂûãÂíåÂ≠óÁ¨¶ÂûãÂèòÈáèÔºåÊèêÈ´òËøêÁÆóÈÄüÂ∫¶
  33   1        int32 iError, //ÂΩìÂâçËØØÂ∑Æ
  34   1            Actual; //ÊúÄÂêéÂæóÂá∫ÁöÑÂÆûÈôÖËæìÂá∫ÂÄº
  35   1        float Kp;   //Âä®ÊÄÅP
  36   1        iError = SetPoint - NowPiont; //Êõ¥Êñ∞ÂΩìÂâçËØØÂ∑Æ
  37   1        /*
  38   1        sprt->SumError += iError*0.01;
  39   1        if (sprt->SumError >= PID[KT])    //ËØØÂ∑ÆÂíåÈôêÂπÖ  -PID[KT] Âà∞  PID[KT]
  40   1        {
  41   1          sprt->SumError = PID[KT];
  42   1        }
  43   1        else if (sprt->SumError <=-PID[KT])
  44   1        {
  45   1          sprt->SumError = -PID[KT];
  46   1        }
  47   1          */
  48   1        Kp = 1.0 * (iError*iError) / PID[KP] + PID[KI]; //PÂÄº‰∏éÂ∑ÆÂÄºÊàê‰∫åÊ¨°ÂáΩÊï∞ÂÖ≥Á≥ªÔºåÂßãÁªàÂ§ß‰∫é0ÔºåÊ≠
             -§Â§ÑPÂíåI‰∏çÊòØPIDÂèÇÊï∞ÔºåËÄåÊòØÂä®ÊÄÅPIDÂèÇÊï∞ÔºåË¶ÅÊ≥®ÊÑèÔºÅÔºÅÔºÅ
  49   1        
C51 COMPILER V9.01   PID                                                                   07/15/2020 14:47:17 PAGE 2   

  50   1        Actual = Kp * iError
  51   1               + PID[KD] * (0.8*(iError - sprt->LastError));//Âè™Áî®PD   ÂéüÂºè‰∏∫0.8*iError+0.2*sprt->LastError-
             - sqrt->LastError;   
  52   1          sprt->LastError = iError;           // Êõ¥Êñ∞ËøáÂéªÁöÑËØØÂ∑Æ
  53   1          //  Actual += sprt->SumError*0.1;‰∏çÁî®IÊâÄ‰ª•‰∏çÈúÄË¶ÅËØØÂ∑ÆÂíå
  54   1        Actual = range_protect_main(Actual, -TURN_lim, TURN_lim);
  55   1        return Actual;
  56   1      }
  57          
  58          //ËΩ¨Âêë‰ΩçÁΩÆÂºèPIDÊéßÂà∂
  59          int32 PID_Realize_D(PID *sptr, float *PID, int32 NowData, int32 Point)
  60          {
  61   1        //ÂΩìÂâçËØØÂ∑ÆÔºåÂÆö‰πâ‰∏∫ÂØÑÂ≠òÂô®ÂèòÈáèÔºåÂè™ËÉΩÁî®‰∫éÊï¥ÂûãÂíåÂ≠óÁ¨¶ÂûãÂèòÈáèÔºåÊèêÈ´òËøêÁÆóÈÄüÂ∫¶
  62   1        int32 iError, // ÂΩìÂâçËØØÂ∑Æ
  63   1           Realize; // ÊúÄÂêéÂæóÂá∫ÁöÑÂÆûÈôÖÂ¢ûÈáè
  64   1              float SetD;
  65   1        iError = Point - NowData; // ËÆ°ÁÆóÂΩìÂâçËØØÂ∑Æ
  66   1        sptr->SumError += PID[KI] * iError; // ËØØÂ∑ÆÁßØÂàÜ
  67   1        if (sptr->SumError >= PID[KT])
  68   1        {
  69   2          sptr->SumError = PID[KT];
  70   2        }
  71   1        else if (sptr->SumError <= -PID[KT])
  72   1        {
  73   2          sptr->SumError = -PID[KT];
  74   2        }
  75   1              SetD =PID[KD];
  76   1                
  77   1              if(Difference*GYRO_Real.Z>0)      //Â¶ÇÊûúÈôÄËû∫‰ª™ËΩ¨ËßíÂíåÁîµÁ£ÅÂ∑ÆË°®ÊòéÁöÑËΩ¨ËßíÁõ∏ÂêåÔºåÂàô‰∏
             -çÈúÄË¶Å D Ë∞ÉËäÇ
  78   1               SetD =0;
  79   1      //        Realize = PID[KP] * iError
  80   1      //      + sptr->SumError
  81   1      //      + SetD * GYRO_Real.Z;
  82   1        Realize = PID[KP] * iError                         //P
  83   1            + sptr->SumError                           //I
  84   1            + SetD * (iError - sptr->LastError);       //D
  85   1        //sptr->PrevError = sptr->LastError;  // Êõ¥Êñ∞ÂâçÊ¨°ËØØÂ∑Æ
  86   1        sptr->LastError = iError;       // Êõ¥Êñ∞‰∏äÊ¨°ËØØÂ∑Æ
  87   1        sptr->LastData  = NowData;      // Êõ¥Êñ∞‰∏äÊ¨°Êï∞ÊçÆ
  88   1      
  89   1        return Realize; // ËøîÂõûÂÆûÈôÖÂÄº
  90   1      }
  91          // ‰ΩçÁΩÆÂºèPIDÊéßÂà∂
  92          int32 PID_Realize(PID *sptr, float *PID, int32 NowData, int32 Point)
  93          {
  94   1        //ÂΩìÂâçËØØÂ∑ÆÔºåÂÆö‰πâ‰∏∫ÂØÑÂ≠òÂô®ÂèòÈáèÔºåÂè™ËÉΩÁî®‰∫éÊï¥ÂûãÂíåÂ≠óÁ¨¶ÂûãÂèòÈáèÔºåÊèêÈ´òËøêÁÆóÈÄüÂ∫¶
  95   1        int32 iError, // ÂΩìÂâçËØØÂ∑Æ
  96   1           Realize; // ÊúÄÂêéÂæóÂá∫ÁöÑÂÆûÈôÖÂ¢ûÈáè
  97   1      
  98   1        iError = Point - NowData; // ËÆ°ÁÆóÂΩìÂâçËØØÂ∑Æ
  99   1        sptr->SumError += PID[KI] * iError; // ËØØÂ∑ÆÁßØÂàÜ
 100   1        if (sptr->SumError >= PID[KT])
 101   1        {
 102   2          sptr->SumError = PID[KT];
 103   2        }
 104   1        else if (sptr->SumError <= -PID[KT])
 105   1        {
 106   2          sptr->SumError = -PID[KT];
 107   2        }
 108   1      
 109   1        Realize = PID[KP] * iError
C51 COMPILER V9.01   PID                                                                   07/15/2020 14:47:17 PAGE 3   

 110   1            + sptr->SumError
 111   1            + PID[KD] * (iError - sptr->LastError);
 112   1        sptr->PrevError = sptr->LastError;  // Êõ¥Êñ∞ÂâçÊ¨°ËØØÂ∑Æ
 113   1        sptr->LastError = iError;       // Êõ¥Êñ∞‰∏äÊ¨°ËØØÂ∑Æ
 114   1        sptr->LastData  = NowData;      // Êõ¥Êñ∞‰∏äÊ¨°Êï∞ÊçÆ
 115   1      
 116   1        return Realize; // ËøîÂõûÂÆûÈôÖÂÄº
 117   1      }
 118          // Â¢ûÈáèÂºèPIDÁîµÊú∫ÊéßÂà∂
 119          int32 PID_Increase(PID *sptr, float *PID, int32 NowData, int32 Point)
 120          {
 121   1        //ÂΩìÂâçËØØÂ∑ÆÔºåÂÆö‰πâ‰∏∫ÂØÑÂ≠òÂô®ÂèòÈáèÔºåÂè™ËÉΩÁî®‰∫éÊï¥ÂûãÂíåÂ≠óÁ¨¶ÂûãÂèòÈáèÔºåÊèêÈ´òËøêÁÆóÈÄüÂ∫¶
 122   1        int32 iError, //ÂΩìÂâçËØØÂ∑Æ
 123   1          Increase; //ÊúÄÂêéÂæóÂá∫ÁöÑÂÆûÈôÖÂ¢ûÈáè
 124   1      
 125   1        iError = Point - NowData; // ËÆ°ÁÆóÂΩìÂâçËØØÂ∑Æ
 126   1        Increase =  PID[KP] * (iError - sptr->LastError)
 127   1              + PID[KI] * iError
 128   1              + PID[KD] * (iError - 2 * sptr->LastError + sptr->PrevError);
 129   1        
 130   1        sptr->PrevError = sptr->LastError;  // Êõ¥Êñ∞ÂâçÊ¨°ËØØÂ∑Æ
 131   1        sptr->LastError = iError;       // Êõ¥Êñ∞‰∏äÊ¨°ËØØÂ∑Æ
 132   1        sptr->LastData  = NowData;      // Êõ¥Êñ∞‰∏äÊ¨°Êï∞ÊçÆ
 133   1        
 134   1        return Increase;  // ËøîÂõûÂ¢ûÈáè
 135   1      }//*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1927    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    244      96
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
