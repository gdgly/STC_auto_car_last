C51 COMPILER V9.01   ZF_SPI                                                                07/15/2020 14:47:12 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE ZF_SPI
OBJECT MODULE PLACED IN .\Out_File\zf_spi.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Libraries\seekfree_libraries\zf_spi.c LARGE OPTIMIZE(8,SPEED) BROW
                    -SE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\USER\inc;.
                    -.\USER\src;..\CODE) DEBUG OBJECTEXTEND PRINT(.\Out_File\zf_spi.lst) TABS(2) OBJECT(.\Out_File\zf_spi.obj)

line level    source

   1          /*********************************************************************************************************
             -************
   2           * COPYRIGHT NOTICE
   3           * Copyright (c) 2020,逐飞科技
   4           * All rights reserved.
   5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
   6           *
   7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
   8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
   9           *
  10           * @file          spi
  11           * @company       成都逐飞科技有限公司
  12           * @author        逐飞科技(QQ790875685)
  13           * @version       查看doc内version文件 版本说明
  14           * @Software    MDK FOR C51 V9.60
  15           * @Target core   STC8A8K64S4
  16           * @Taobao      https://seekfree.taobao.com/
  17           * @date          2020-4-14
  18           *********************************************************************************************************
             -***********/
  19          
  20          #include "zf_gpio.h"
  21          #include "zf_spi.h"
  22          
  23          
  24          //--------------------------------------------------------------------------------------------------------
             ------------
  25          //  @brief      spi初始化函数(ss引脚由软件控制)
  26          //  @param      spi_n     选择SPI模块(SPI_1-SPI_4)
  27          //  @param      sck_pin     选择SCK引脚
  28          //  @param      mosi_pin    选择MOSI引脚
  29          //  @param      miso_pin    选择MISO引脚
  30          //  @param      mstr      主从选择
  31          //  @param      mode            SPI模式 0：CPOL=0 CPHA=0    1：CPOL=0 CPHA=1   2：CPOL=1 CPHA=0   3：CPOL=
             -1 CPHA=1 //具体细节可自行百度
  32          //  @param      baud      速率选择
  33          //  @since      v1.0
  34          //  Sample usage:       spi_init(SPI_1,SPI1_SCLK_P15, SPI1_MOSI_P13,SPI1_MISO_P14,MASTER,SYSclk_DIV_4); 
  35          //                //初始化SPI1,主机模式,速率为系统频率/4，SCLK引脚P1.5 MOSI引脚P1.3 MISO引脚P1.4
  36          //--------------------------------------------------------------------------------------------------------
             ------------
  37          void spi_init(SPIN_enum spi_n,
  38                  SPI_PIN_enum sck_pin, 
  39                  SPI_PIN_enum mosi_pin, 
  40                  SPI_PIN_enum miso_pin, 
  41                  uint8 mode,
  42                  SPI_MSTR_enum mstr,
  43                  SPI_BAUD_enum baud)
  44          {
  45   1      
  46   1        sck_pin = sck_pin;
  47   1        mosi_pin = mosi_pin;
  48   1        miso_pin = miso_pin;
C51 COMPILER V9.01   ZF_SPI                                                                07/15/2020 14:47:12 PAGE 2   

  49   1        
  50   1      
  51   1        switch(spi_n)
  52   1          {
  53   2          //IO口需要配置为：准双向口（传统8051端口模式，弱上拉）
  54   2          case SPI_1:
  55   2            gpio_mode(P1_3, GPIO);
  56   2            gpio_mode(P1_4, GPIO);
  57   2            gpio_mode(P1_5, GPIO);
  58   2            break;
  59   2          case SPI_2:
  60   2            gpio_mode(P2_3, GPIO);
  61   2            gpio_mode(P2_4, GPIO);
  62   2            gpio_mode(P2_5, GPIO);
  63   2            break;
  64   2          case SPI_3:
  65   2            gpio_mode(P7_7, GPIO);
  66   2            gpio_mode(P7_6, GPIO);
  67   2            gpio_mode(P7_5, GPIO);
  68   2            break;
  69   2          case SPI_4:
  70   2            gpio_mode(P3_4, GPIO);
  71   2            gpio_mode(P3_3, GPIO);
  72   2            gpio_mode(P3_2, GPIO);
  73   2            break;
  74   2          }
  75   1        
  76   1        P_SW1 &= ~(0x03<<2);  //清除SPI功能脚选择位
  77   1          switch(spi_n)
  78   1          {
  79   2          case SPI_1:
  80   2              P_SW1 |= (0x00<<2); //SS/P1.2, MOSI/P1.3, MISO/P1.4, SCLK/P1.5
  81   2              break;
  82   2          case SPI_2:
  83   2              P_SW1 |= (0x01<<2); //SS_2/P2.2, MOSI_2/P2.3, MISO_2/P2.4, SCLK_2/P2.5
  84   2              break;
  85   2          case SPI_3:
  86   2              P_SW1 |= (0x02<<2); //SS_3/P5.4, MOSI_3/P4.0, MISO_3/P4.1, SCLK_3/P4.3
  87   2              break;
  88   2          case SPI_4:
  89   2              P_SW1 |= (0x03<<2); //SS_4/P3.5, MOSI_4/P3.4, MISO_4/P3.3, SCLK_4/P3.2
  90   2              break;
  91   2          }
  92   1        
  93   1        SPCTL &= 0xF3;    //清除SPI极性和相位
  94   1        switch(mode)
  95   1        {
  96   2        case 0:
  97   2          
  98   2          break;
  99   2        case 1:
 100   2          SPCTL |= 0x01<<2;
 101   2          break;
 102   2        case 2:
 103   2          SPCTL |= 0x02<<2;
 104   2          break;
 105   2        case 3:
 106   2          SPCTL |= 0x03<<2;
 107   2          break;
 108   2        }
 109   1          
 110   1        
C51 COMPILER V9.01   ZF_SPI                                                                07/15/2020 14:47:12 PAGE 3   

 111   1        SPCTL |= baud;    //速率设定
 112   1      
 113   1          if(mstr == MASTER)
 114   1          {
 115   2              SPCTL |= 1<<7;  //忽略SS引脚功能，使用MSTR确定器件是主机还是从机
 116   2              SPCTL |= 1<<4;  //主机模式
 117   2          }
 118   1          else
 119   1          {
 120   2              //不做操作
 121   2          }
 122   1          SPCTL |= 1<<6;    //使能SPI功能
 123   1      }
 124          
 125          
 126          
 127          
 128          //--------------------------------------------------------------------------------------------------------
             ------------
 129          //  @brief      SPI发送接收函数
 130          //  @param      dat           发送的数据
 131          //  @since      v1.0
 132          //  Sample usage:       buf_1 = spi_mosi(SPI_1,1,buf);    //发送buff的内容，并接收到buf_1里，长度为1字节
 133          //--------------------------------------------------------------------------------------------------------
             ------------
 134          uint8 spi_mosi(uint8 dat)
 135          {
 136   1          SPDAT = dat;          //DATA寄存器赋值
 137   1          while (!(SPSTAT & 0x80));     //查询完成标志
 138   1          SPSTAT = 0xc0;                  //清中断标志
 139   1        return SPDAT;
 140   1      }
 141          
 142          //--------------------------------------------------------------------------------------------------------
             ------------
 143          //  @brief      spi引脚切换函数(ss引脚由软件控制)
 144          //  @param      spi_n     选择SPI模块(SPI_1-SPI_4)
 145          //  @param      sck_pin     选择SCK引脚
 146          //  @param      mosi_pin    选择MOSI引脚
 147          //  @param      miso_pin    选择MISO引脚
 148          //  Sample usage:       spi_change_pin(SPI_1,SPI1_SCLK_P15, SPI1_MOSI_P13,SPI1_MISO_P14); 
 149          //                //切换SPI引脚
 150          //--------------------------------------------------------------------------------------------------------
             ------------
 151          void spi_change_pin(SPIN_enum spi_n, SPI_PIN_enum sck_pin, SPI_PIN_enum mosi_pin, SPI_PIN_enum miso_pin)
 152          {
 153   1        sck_pin = sck_pin;
 154   1        mosi_pin = mosi_pin;
 155   1        miso_pin = miso_pin;
 156   1        
 157   1        switch(spi_n)
 158   1          {
 159   2          //IO口需要配置为：准双向口（传统8051端口模式，弱上拉）
 160   2          case SPI_1:
 161   2            gpio_mode(P1_3, GPIO);
 162   2            gpio_mode(P1_4, GPIO);
 163   2            gpio_mode(P1_5, GPIO);
 164   2            gpio_pull_set(P1_3, PULLUP);
 165   2            gpio_pull_set(P1_4, NOPULL);
 166   2            gpio_pull_set(P1_5, PULLUP);
 167   2            break;
 168   2          case SPI_2:
C51 COMPILER V9.01   ZF_SPI                                                                07/15/2020 14:47:12 PAGE 4   

 169   2            gpio_mode(P2_3, GPIO);
 170   2            gpio_mode(P2_4, GPIO);
 171   2            gpio_mode(P2_5, GPIO);
 172   2            gpio_pull_set(P2_3, PULLUP);
 173   2            gpio_pull_set(P2_4, NOPULL);
 174   2            gpio_pull_set(P2_5, PULLUP);
 175   2            break;
 176   2          case SPI_3:
 177   2            gpio_mode(P7_7, GPIO);
 178   2            gpio_mode(P7_6, GPIO);
 179   2            gpio_mode(P7_5, GPIO);
 180   2            gpio_pull_set(P7_7,PULLUP);
 181   2            gpio_pull_set(P7_6,NOPULL);
 182   2            gpio_pull_set(P7_5,PULLUP);
 183   2            break;
 184   2          case SPI_4:
 185   2            gpio_mode(P3_4, GPIO);
 186   2            gpio_mode(P3_3, GPIO);
 187   2            gpio_mode(P3_2, GPIO);
 188   2            gpio_pull_set(P3_4,PULLUP);
 189   2            gpio_pull_set(P3_3,NOPULL);
 190   2            gpio_pull_set(P3_2,PULLUP);
 191   2            break;
 192   2          }
 193   1        
 194   1        P_SW1 &= ~(0x03<<2);  //清除SPI功能脚选择位
 195   1          switch(spi_n)
 196   1          {
 197   2          case SPI_1:
 198   2            P_SW1 |= (0x00<<2); //MOSI/P1.3, MISO/P1.4, SCLK/P1.5
 199   2            break;
 200   2          case SPI_2:
 201   2            P_SW1 |= (0x01<<2); //MOSI_2/P2.3, MISO_2/P2.4, SCLK_2/P2.5
 202   2            break;
 203   2          case SPI_3:
 204   2            P_SW1 |= (0x02<<2); //MOSI_3/P4.0, MISO_3/P4.1, SCLK_3/P4.3
 205   2            break;
 206   2          case SPI_4:
 207   2            P_SW1 |= (0x03<<2); //MOSI_4/P3.4, MISO_4/P3.3, SCLK_4/P3.2
 208   2            break;
 209   2          }
 210   1      }
 211          
 212          
 213          //--------------------------------------------------------------------------------------------------------
             ------------
 214          //  @brief      spi模式切换函数
 215          //  @param      mode            SPI模式 0：CPOL=0 CPHA=0    1：CPOL=0 CPHA=1   2：CPOL=1 CPHA=0   3：CPOL=
             -1 CPHA=1 //具体细节可自行百度
 216          //  Sample usage:       
 217          //--------------------------------------------------------------------------------------------------------
             ------------
 218          void spi_change_mode(uint8 mode)
 219          {
 220   1        SPCTL &= 0xF7;    //清除SPI极性和相位
 221   1        switch(mode)
 222   1        {
 223   2        case 0:
 224   2          
 225   2          break;
 226   2        case 1:
 227   2          SPCTL |= 0x01<<2;
C51 COMPILER V9.01   ZF_SPI                                                                07/15/2020 14:47:12 PAGE 5   

 228   2          break;
 229   2        case 2:
 230   2          SPCTL |= 0x02<<2;
 231   2          break;
 232   2        case 3:
 233   2          SPCTL |= 0x03<<2;
 234   2          break;
 235   2        }
 236   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    445    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
