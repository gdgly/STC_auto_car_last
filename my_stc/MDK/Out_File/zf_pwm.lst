C51 COMPILER V9.01   ZF_PWM                                                                07/15/2020 14:47:13 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE ZF_PWM
OBJECT MODULE PLACED IN .\Out_File\zf_pwm.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Libraries\seekfree_libraries\zf_pwm.c LARGE OPTIMIZE(8,SPEED) BROW
                    -SE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\USER\inc;.
                    -.\USER\src;..\CODE) DEBUG OBJECTEXTEND PRINT(.\Out_File\zf_pwm.lst) TABS(2) OBJECT(.\Out_File\zf_pwm.obj)

line level    source

   1          /*********************************************************************************************************
             -************
   2           * COPYRIGHT NOTICE
   3           * Copyright (c) 2020,逐飞科技
   4           * All rights reserved.
   5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
   6           *
   7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
   8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
   9           *
  10           * @file          pwm
  11           * @company       成都逐飞科技有限公司
  12           * @author        逐飞科技(QQ790875685)
  13           * @version       查看doc内version文件 版本说明
  14           * @Software    MDK FOR C51 V9.60
  15           * @Target core   STC8A8K64S4
  16           * @Taobao      https://seekfree.taobao.com/
  17           * @date          2020-4-14
  18           *********************************************************************************************************
             -***********/
  19          
  20          #include "zf_pwm.h"
  21          #include "zf_gpio.h"
  22          #include "board.h"
  23          
  24          #define PWMx_CR_BASE_ADDR 0xff04
  25          #define PWMx_T1_BASE_ADDR 0xff00
  26          #define PWMx_T2_BASE_ADDR 0xff02
  27          
  28          
  29          //--------------------------------------------------------------------------------------------------------
             ------------
  30          //  @brief      PWM_gpio初始化（内部使用用户无需关心）
  31          //  @param      pwmch       PWM通道号及引脚
  32          //  @return     void
  33          //  Sample usage:           
  34          //--------------------------------------------------------------------------------------------------------
             ------------
  35          void pwm_set_gpio(PWMCH_enum pwmch)
  36          {
  37   1        uint8 gpio_num;
  38   1      
  39   1        if((pwmch & 0x03) == 0)    //P2
  40   1        {
  41   2          gpio_num = 0x20;
  42   2        }
  43   1        else if((pwmch & 0x03) == 1) //P1
  44   1        {
  45   2          gpio_num = 0x10;
  46   2        }
  47   1        else if((pwmch & 0x03) == 2) //P6
  48   1        {
  49   2          gpio_num = 0x60;
C51 COMPILER V9.01   ZF_PWM                                                                07/15/2020 14:47:13 PAGE 2   

  50   2        }
  51   1        gpio_num |= (pwmch >> 4);
  52   1        
  53   1        gpio_mode(gpio_num,GPO_PP);
  54   1      }
  55          
  56          
  57          //--------------------------------------------------------------------------------------------------------
             ------------
  58          //  @brief      PWM初始化
  59          //  @param      pwmch       PWM通道号及引脚
  60          //  @param      freq        PWM频率(64Hz-3MHz)
  61          //  @param      duty        PWM占空比
  62          //  @return     void
  63          //  Sample usage:           pwm_init(PWM0_P00, 100, 5000);     //初始化PWM0  使用引脚P0.0  输出PWM频率100H
             -Z   占空比为百分之 5000/PWM_DUTY_MAX*100
  64          //              PWM_DUTY_MAX在fsl_pwm.h文件中 默认为10000
  65          //  @note         所有的PWM通道只能设置为同一个频率
  66          //              PWMx 同一时间，只能有一个引脚输出PWM
  67          //--------------------------------------------------------------------------------------------------------
             ------------
  68          void pwm_init(PWMCH_enum pwmch,uint32 freq, uint16 duty)
  69          {
  70   1        
  71   1        uint16 match_temp;
  72   1        uint16 period_temp; 
  73   1        uint8 freq_div = 0;
  74   1        
  75   1        pwm_set_gpio(pwmch);          //设置为推挽输出
  76   1        P_SW2 |= 0x80;
  77   1        
  78   1        //清除PWM引脚
  79   1        (*(unsigned char volatile xdata *)(PWMx_CR_BASE_ADDR + (pwmch & 0xF0))) &= ~(0x03 << 3);
  80   1        //切换PWM引脚
  81   1        (*(unsigned char volatile xdata *)(PWMx_CR_BASE_ADDR + (pwmch & 0xF0))) |= (pwmch & 0x03) << 3;
  82   1        
  83   1        freq_div = (sys_clk / freq) >> 15;
  84   1        period_temp = sys_clk / freq / (freq_div + 1);          //周期
  85   1        match_temp = period_temp * ((float) duty / PWM_DUTY_MAX); //占空比
  86   1      
  87   1        //设置pwmn频率为 系统时钟/freq_div
  88   1        PWMCKS = freq_div;
  89   1        //设置PWMn周期为period_temp个 PWM 时钟
  90   1        PWMC = (uint16)period_temp;   
  91   1      
  92   1        // 在计数值为 match_temp 地方 pwmch 通道输出低电平
  93   1        (*(unsigned int  volatile xdata *)(PWMx_T1_BASE_ADDR + (pwmch & 0xF0))) = (uint16)match_temp;
  94   1      //  // 在计数值为 match_temp 地方 pwmch 通道输出高电平
  95   1      //  (*(unsigned int  volatile xdata *)(PWMx_T2_BASE_ADDR + (pwmch & 0xF0))) = (uint16)0;
  96   1      
  97   1      
  98   1        //使能 PWMx 输出
  99   1        (*(unsigned char volatile xdata *)(PWMx_CR_BASE_ADDR + (pwmch & 0xF0))) |= 1 << 7;
 100   1      
 101   1        P_SW2 &= ~0x80;
 102   1      
 103   1        PWMCR = 0x80; // 启动 PWM 模块
 104   1        
 105   1      
 106   1      }
 107          
 108          
C51 COMPILER V9.01   ZF_PWM                                                                07/15/2020 14:47:13 PAGE 3   

 109          
 110          //--------------------------------------------------------------------------------------------------------
             ------------
 111          //  @brief      PWM占空比设置
 112          //  @param      pwmch       PWM通道号及引脚
 113          //  @param      duty        PWM占空比
 114          //  @return     void
 115          //  Sample usage:           pwm_duty(PWM0_P00, 5000);     //初始化PWM0  使用引脚P0.0  输出PWM频率50HZ   占
             -空比为百分之 5000/PWM_DUTY_MAX*100
 116          //              PWM_DUTY_MAX在fsl_pwm.h文件中 默认为50000
 117          //--------------------------------------------------------------------------------------------------------
             ------------
 118          void pwm_duty(PWMCH_enum pwmch, uint16 duty)
 119          {
 120   1        uint16 match_temp;
 121   1        P_SW2 |= 0x80;
 122   1        
 123   1        match_temp = (uint16)(PWMC) * ((float)duty/PWM_DUTY_MAX); //占空比
 124   1        // 在计数值为 match_temp 地方 pwmch 通道输出低电平
 125   1        (*(unsigned int  volatile xdata *)(PWMx_T1_BASE_ADDR + (pwmch & 0xF0))) = (uint16)match_temp;
 126   1      //  // 在计数值为 match_temp 地方 pwmch 通道输出高电平
 127   1      //  (*(unsigned int  volatile xdata *)(PWMx_T2_BASE_ADDR + (pwmch & 0xF0))) = (uint16)0;
 128   1        
 129   1        
 130   1        P_SW2 &= ~0x80;
 131   1      }
 132          
 133          
 134          //--------------------------------------------------------------------------------------------------------
             ------------
 135          //  @brief      PWM频率设置（所有的通道只能使用一个频率）
 136          //  @param      freq        PWM频率
 137          //  @param      duty        PWM占空比
 138          //  @return     void
 139          //  Sample usage:           pwm_freq(PWM0_P00, 50, 5000);     //修改化PWM0  使用引脚P0.0  输出PWM频率50HZ 
             -  占空比为百分之 5000/PWM_DUTY_MAX*100
 140          //  @note         所有的PWM通道只能设置为一个频率
 141          //--------------------------------------------------------------------------------------------------------
             ------------
 142          void pwm_freq(uint32 freq)
 143          {
 144   1        uint16 period_temp; 
 145   1        uint8 freq_div = 0;
 146   1        P_SW2 |= 0x80;
 147   1        freq_div = (sys_clk / freq) >> 15;
 148   1        period_temp = sys_clk / freq / (freq_div + 1);          //周期
 149   1      
 150   1        //设置pwmn频率为 系统时钟/freq_div
 151   1        PWMCKS = freq_div;
 152   1        //设置PWMn周期为period_temp个 PWM 时钟
 153   1        PWMC = (uint16)period_temp; 
 154   1        
 155   1        P_SW2 &= ~0x80;
 156   1      }
 157          
 158          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    554    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      17
C51 COMPILER V9.01   ZF_PWM                                                                07/15/2020 14:47:13 PAGE 4   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
